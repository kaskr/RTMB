// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "RTMB.h"

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// valid
bool valid(ADrep x);
RcppExport SEXP _RTMB_valid(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(valid(x));
    return rcpp_result_gen;
END_RCPP
}
// ad_context
bool ad_context();
RcppExport SEXP _RTMB_ad_context() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ad_context());
    return rcpp_result_gen;
END_RCPP
}
// as_advector
Rcpp::ComplexVector& as_advector(Rcpp::ComplexVector& x);
RcppExport SEXP _RTMB_as_advector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::ComplexVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_advector(x));
    return rcpp_result_gen;
END_RCPP
}
// SpJacFun
Rcpp::S4 SpJacFun(Rcpp::XPtr<TMBad::ADFun<> > adf);
RcppExport SEXP _RTMB_SpJacFun(SEXP adfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    rcpp_result_gen = Rcpp::wrap(SpJacFun(adf));
    return rcpp_result_gen;
END_RCPP
}
// RangeProj
void RangeProj(Rcpp::XPtr<TMBad::ADFun<> > adf, Rcpp::IntegerVector i);
RcppExport SEXP _RTMB_RangeProj(SEXP adfSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type i(iSEXP);
    RangeProj(adf, i);
    return R_NilValue;
END_RCPP
}
// find_op_by_name
Rcpp::IntegerVector find_op_by_name(Rcpp::XPtr<TMBad::ADFun<> > adf, Rcpp::String name);
RcppExport SEXP _RTMB_find_op_by_name(SEXP adfSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(find_op_by_name(adf, name));
    return rcpp_result_gen;
END_RCPP
}
// op2var
Rcpp::IntegerVector op2var(Rcpp::XPtr<TMBad::ADFun<> > adf, Rcpp::IntegerVector nodes);
RcppExport SEXP _RTMB_op2var(SEXP adfSEXP, SEXP nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type nodes(nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(op2var(adf, nodes));
    return rcpp_result_gen;
END_RCPP
}
// findIndex
Rcpp::IntegerVector findIndex(Rcpp::XPtr<TMBad::ADFun<> > adf, Rcpp::String name);
RcppExport SEXP _RTMB_findIndex(SEXP adfSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(findIndex(adf, name));
    return rcpp_result_gen;
END_RCPP
}
// setinvIndex
void setinvIndex(Rcpp::XPtr<TMBad::ADFun<> > adf, Rcpp::IntegerVector index);
RcppExport SEXP _RTMB_setinvIndex(SEXP adfSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index(indexSEXP);
    setinvIndex(adf, index);
    return R_NilValue;
END_RCPP
}
// getinvIndex
Rcpp::IntegerVector getinvIndex(Rcpp::XPtr<TMBad::ADFun<> > adf);
RcppExport SEXP _RTMB_getinvIndex(SEXP adfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    rcpp_result_gen = Rcpp::wrap(getinvIndex(adf));
    return rcpp_result_gen;
END_RCPP
}
// get_graph
Rcpp::S4 get_graph(Rcpp::XPtr<TMBad::ADFun<> > adf);
RcppExport SEXP _RTMB_get_graph(SEXP adfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    rcpp_result_gen = Rcpp::wrap(get_graph(adf));
    return rcpp_result_gen;
END_RCPP
}
// get_df
Rcpp::DataFrame get_df(Rcpp::XPtr<TMBad::ADFun<> > adf);
RcppExport SEXP _RTMB_get_df(SEXP adfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    rcpp_result_gen = Rcpp::wrap(get_df(adf));
    return rcpp_result_gen;
END_RCPP
}
// timer
Rcpp::NumericVector timer(Rcpp::XPtr<TMBad::ADFun<> > adf, int rep);
RcppExport SEXP _RTMB_timer(SEXP adfSEXP, SEXP repSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< int >::type rep(repSEXP);
    rcpp_result_gen = Rcpp::wrap(timer(adf, rep));
    return rcpp_result_gen;
END_RCPP
}
// get_node
void get_node(Rcpp::XPtr<TMBad::ADFun<> > adf, int node);
RcppExport SEXP _RTMB_get_node(SEXP adfSEXP, SEXP nodeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< int >::type node(nodeSEXP);
    get_node(adf, node);
    return R_NilValue;
END_RCPP
}
// set_tape_config
Rcpp::List set_tape_config(std::string matmul, std::string ops, std::string math, std::string sum, std::string mvnorm, std::string compare);
RcppExport SEXP _RTMB_set_tape_config(SEXP matmulSEXP, SEXP opsSEXP, SEXP mathSEXP, SEXP sumSEXP, SEXP mvnormSEXP, SEXP compareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type matmul(matmulSEXP);
    Rcpp::traits::input_parameter< std::string >::type ops(opsSEXP);
    Rcpp::traits::input_parameter< std::string >::type math(mathSEXP);
    Rcpp::traits::input_parameter< std::string >::type sum(sumSEXP);
    Rcpp::traits::input_parameter< std::string >::type mvnorm(mvnormSEXP);
    Rcpp::traits::input_parameter< std::string >::type compare(compareSEXP);
    rcpp_result_gen = Rcpp::wrap(set_tape_config(matmul, ops, math, sum, mvnorm, compare));
    return rcpp_result_gen;
END_RCPP
}
// compare_allow
bool compare_allow();
RcppExport SEXP _RTMB_compare_allow() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(compare_allow());
    return rcpp_result_gen;
END_RCPP
}
// advec
Rcpp::RObject advec(const Rcpp::NumericVector& x);
RcppExport SEXP _RTMB_advec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(advec(x));
    return rcpp_result_gen;
END_RCPP
}
// dependent
ADrep dependent(ADrep x);
RcppExport SEXP _RTMB_dependent(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dependent(x));
    return rcpp_result_gen;
END_RCPP
}
// independent
ADrep independent(ADrep x);
RcppExport SEXP _RTMB_independent(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(independent(x));
    return rcpp_result_gen;
END_RCPP
}
// getValues
Rcpp::NumericVector getValues(ADrep x);
RcppExport SEXP _RTMB_getValues(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getValues(x));
    return rcpp_result_gen;
END_RCPP
}
// getVariables
Rcpp::LogicalVector getVariables(ADrep x);
RcppExport SEXP _RTMB_getVariables(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(getVariables(x));
    return rcpp_result_gen;
END_RCPP
}
// dbgprint
void dbgprint(Rcpp::ComplexVector x);
RcppExport SEXP _RTMB_dbgprint(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::ComplexVector >::type x(xSEXP);
    dbgprint(x);
    return R_NilValue;
END_RCPP
}
// ptr_getx
Rcpp::XPtr<double> ptr_getx(Rcpp::XPtr<TMBad::ADFun<> > adf);
RcppExport SEXP _RTMB_ptr_getx(SEXP adfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    rcpp_result_gen = Rcpp::wrap(ptr_getx(adf));
    return rcpp_result_gen;
END_RCPP
}
// ptr_gety
Rcpp::XPtr<double> ptr_gety(Rcpp::XPtr<TMBad::ADFun<> > adf);
RcppExport SEXP _RTMB_ptr_gety(SEXP adfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    rcpp_result_gen = Rcpp::wrap(ptr_gety(adf));
    return rcpp_result_gen;
END_RCPP
}
// distr_dexp
ADrep distr_dexp(ADrep x, ADrep rate, bool give_log);
RcppExport SEXP _RTMB_distr_dexp(SEXP xSEXP, SEXP rateSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dexp(x, rate, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dweibull
ADrep distr_dweibull(ADrep x, ADrep shape, ADrep scale, bool give_log);
RcppExport SEXP _RTMB_distr_dweibull(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dweibull(x, shape, scale, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dbinom
ADrep distr_dbinom(ADrep x, ADrep size, ADrep prob, bool give_log);
RcppExport SEXP _RTMB_distr_dbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dbinom(x, size, prob, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dbinom_robust
ADrep distr_dbinom_robust(ADrep x, ADrep size, ADrep logit_p, bool give_log);
RcppExport SEXP _RTMB_distr_dbinom_robust(SEXP xSEXP, SEXP sizeSEXP, SEXP logit_pSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logit_p(logit_pSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dbinom_robust(x, size, logit_p, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dbeta
ADrep distr_dbeta(ADrep x, ADrep shape1, ADrep shape2, bool give_log);
RcppExport SEXP _RTMB_distr_dbeta(SEXP xSEXP, SEXP shape1SEXP, SEXP shape2SEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape2(shape2SEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dbeta(x, shape1, shape2, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_df
ADrep distr_df(ADrep x, ADrep df1, ADrep df2, bool give_log);
RcppExport SEXP _RTMB_distr_df(SEXP xSEXP, SEXP df1SEXP, SEXP df2SEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type df1(df1SEXP);
    Rcpp::traits::input_parameter< ADrep >::type df2(df2SEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_df(x, df1, df2, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dlogis
ADrep distr_dlogis(ADrep x, ADrep location, ADrep scale, bool give_log);
RcppExport SEXP _RTMB_distr_dlogis(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type location(locationSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dlogis(x, location, scale, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dsn
ADrep distr_dsn(ADrep x, ADrep alpha, bool give_log);
RcppExport SEXP _RTMB_distr_dsn(SEXP xSEXP, SEXP alphaSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dsn(x, alpha, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dt
ADrep distr_dt(ADrep x, ADrep df, bool give_log);
RcppExport SEXP _RTMB_distr_dt(SEXP xSEXP, SEXP dfSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dt(x, df, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dSHASHo
ADrep distr_dSHASHo(ADrep x, ADrep mu, ADrep sigma, ADrep nu, ADrep tau, bool give_log);
RcppExport SEXP _RTMB_distr_dSHASHo(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP tauSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< ADrep >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dSHASHo(x, mu, sigma, nu, tau, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dtweedie
ADrep distr_dtweedie(ADrep x, ADrep mu, ADrep phi, ADrep p, bool give_log);
RcppExport SEXP _RTMB_distr_dtweedie(SEXP xSEXP, SEXP muSEXP, SEXP phiSEXP, SEXP pSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dtweedie(x, mu, phi, p, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dnbinom
ADrep distr_dnbinom(ADrep x, ADrep size, ADrep prob, bool give_log);
RcppExport SEXP _RTMB_distr_dnbinom(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dnbinom(x, size, prob, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dnbinom_robust
ADrep distr_dnbinom_robust(ADrep x, ADrep log_mu, ADrep log_var_minus_mu, bool give_log);
RcppExport SEXP _RTMB_distr_dnbinom_robust(SEXP xSEXP, SEXP log_muSEXP, SEXP log_var_minus_muSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type log_mu(log_muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type log_var_minus_mu(log_var_minus_muSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dnbinom_robust(x, log_mu, log_var_minus_mu, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dnbinom2
ADrep distr_dnbinom2(ADrep x, ADrep mu, ADrep var, bool give_log);
RcppExport SEXP _RTMB_distr_dnbinom2(SEXP xSEXP, SEXP muSEXP, SEXP varSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mu(muSEXP);
    Rcpp::traits::input_parameter< ADrep >::type var(varSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dnbinom2(x, mu, var, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dpois
ADrep distr_dpois(ADrep x, ADrep lambda, bool give_log);
RcppExport SEXP _RTMB_distr_dpois(SEXP xSEXP, SEXP lambdaSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dpois(x, lambda, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dgamma
ADrep distr_dgamma(ADrep x, ADrep shape, ADrep scale, bool give_log);
RcppExport SEXP _RTMB_distr_dgamma(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dgamma(x, shape, scale, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_dlgamma
ADrep distr_dlgamma(ADrep x, ADrep shape, ADrep scale, bool give_log);
RcppExport SEXP _RTMB_distr_dlgamma(SEXP xSEXP, SEXP shapeSEXP, SEXP scaleSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_dlgamma(x, shape, scale, give_log));
    return rcpp_result_gen;
END_RCPP
}
// distr_pnorm
ADrep distr_pnorm(ADrep q, ADrep mean, ADrep sd);
RcppExport SEXP _RTMB_distr_pnorm(SEXP qSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type q(qSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_pnorm(q, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// distr_pgamma
ADrep distr_pgamma(ADrep q, ADrep shape, ADrep scale);
RcppExport SEXP _RTMB_distr_pgamma(SEXP qSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type q(qSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_pgamma(q, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// distr_ppois
ADrep distr_ppois(ADrep q, ADrep lambda);
RcppExport SEXP _RTMB_distr_ppois(SEXP qSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type q(qSEXP);
    Rcpp::traits::input_parameter< ADrep >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_ppois(q, lambda));
    return rcpp_result_gen;
END_RCPP
}
// distr_pexp
ADrep distr_pexp(ADrep q, ADrep rate);
RcppExport SEXP _RTMB_distr_pexp(SEXP qSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type q(qSEXP);
    Rcpp::traits::input_parameter< ADrep >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_pexp(q, rate));
    return rcpp_result_gen;
END_RCPP
}
// distr_pweibull
ADrep distr_pweibull(ADrep q, ADrep shape, ADrep scale);
RcppExport SEXP _RTMB_distr_pweibull(SEXP qSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type q(qSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_pweibull(q, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// distr_pbeta
ADrep distr_pbeta(ADrep q, ADrep shape1, ADrep shape2);
RcppExport SEXP _RTMB_distr_pbeta(SEXP qSEXP, SEXP shape1SEXP, SEXP shape2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type q(qSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape2(shape2SEXP);
    rcpp_result_gen = Rcpp::wrap(distr_pbeta(q, shape1, shape2));
    return rcpp_result_gen;
END_RCPP
}
// distr_qnorm
ADrep distr_qnorm(ADrep p, ADrep mean, ADrep sd);
RcppExport SEXP _RTMB_distr_qnorm(SEXP pSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< ADrep >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< ADrep >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_qnorm(p, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// distr_qgamma
ADrep distr_qgamma(ADrep p, ADrep shape, ADrep scale);
RcppExport SEXP _RTMB_distr_qgamma(SEXP pSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_qgamma(p, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// distr_qexp
ADrep distr_qexp(ADrep p, ADrep rate);
RcppExport SEXP _RTMB_distr_qexp(SEXP pSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< ADrep >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_qexp(p, rate));
    return rcpp_result_gen;
END_RCPP
}
// distr_qweibull
ADrep distr_qweibull(ADrep p, ADrep shape, ADrep scale);
RcppExport SEXP _RTMB_distr_qweibull(SEXP pSEXP, SEXP shapeSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< ADrep >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_qweibull(p, shape, scale));
    return rcpp_result_gen;
END_RCPP
}
// distr_qbeta
ADrep distr_qbeta(ADrep p, ADrep shape1, ADrep shape2);
RcppExport SEXP _RTMB_distr_qbeta(SEXP pSEXP, SEXP shape1SEXP, SEXP shape2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type p(pSEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape1(shape1SEXP);
    Rcpp::traits::input_parameter< ADrep >::type shape2(shape2SEXP);
    rcpp_result_gen = Rcpp::wrap(distr_qbeta(p, shape1, shape2));
    return rcpp_result_gen;
END_RCPP
}
// distr_besselK
ADrep distr_besselK(ADrep x, ADrep nu);
RcppExport SEXP _RTMB_distr_besselK(SEXP xSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_besselK(x, nu));
    return rcpp_result_gen;
END_RCPP
}
// distr_besselI
ADrep distr_besselI(ADrep x, ADrep nu);
RcppExport SEXP _RTMB_distr_besselI(SEXP xSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_besselI(x, nu));
    return rcpp_result_gen;
END_RCPP
}
// distr_besselJ
ADrep distr_besselJ(ADrep x, ADrep nu);
RcppExport SEXP _RTMB_distr_besselJ(SEXP xSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_besselJ(x, nu));
    return rcpp_result_gen;
END_RCPP
}
// distr_besselY
ADrep distr_besselY(ADrep x, ADrep nu);
RcppExport SEXP _RTMB_distr_besselY(SEXP xSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_besselY(x, nu));
    return rcpp_result_gen;
END_RCPP
}
// distr_compois_calc_logZ
ADrep distr_compois_calc_logZ(ADrep loglambda, ADrep nu);
RcppExport SEXP _RTMB_distr_compois_calc_logZ(SEXP loglambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type loglambda(loglambdaSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_compois_calc_logZ(loglambda, nu));
    return rcpp_result_gen;
END_RCPP
}
// distr_compois_calc_loglambda
ADrep distr_compois_calc_loglambda(ADrep logmean, ADrep nu);
RcppExport SEXP _RTMB_distr_compois_calc_loglambda(SEXP logmeanSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type logmean(logmeanSEXP);
    Rcpp::traits::input_parameter< ADrep >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_compois_calc_loglambda(logmean, nu));
    return rcpp_result_gen;
END_RCPP
}
// distr_logspace_add
ADrep distr_logspace_add(ADrep logx, ADrep logy);
RcppExport SEXP _RTMB_distr_logspace_add(SEXP logxSEXP, SEXP logySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type logx(logxSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logy(logySEXP);
    rcpp_result_gen = Rcpp::wrap(distr_logspace_add(logx, logy));
    return rcpp_result_gen;
END_RCPP
}
// distr_logspace_sub
ADrep distr_logspace_sub(ADrep logx, ADrep logy);
RcppExport SEXP _RTMB_distr_logspace_sub(SEXP logxSEXP, SEXP logySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type logx(logxSEXP);
    Rcpp::traits::input_parameter< ADrep >::type logy(logySEXP);
    rcpp_result_gen = Rcpp::wrap(distr_logspace_sub(logx, logy));
    return rcpp_result_gen;
END_RCPP
}
// distr_rcompois
double distr_rcompois(double loglambda, double nu);
RcppExport SEXP _RTMB_distr_rcompois(SEXP loglambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type loglambda(loglambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(distr_rcompois(loglambda, nu));
    return rcpp_result_gen;
END_RCPP
}
// ip2D
Rcpp::XPtr<tmbutils::interpol2D<double> > ip2D(Rcpp::NumericMatrix data, Rcpp::NumericVector x_range, Rcpp::NumericVector y_range, Rcpp::List con);
RcppExport SEXP _RTMB_ip2D(SEXP dataSEXP, SEXP x_rangeSEXP, SEXP y_rangeSEXP, SEXP conSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x_range(x_rangeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y_range(y_rangeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type con(conSEXP);
    rcpp_result_gen = Rcpp::wrap(ip2D(data, x_range, y_range, con));
    return rcpp_result_gen;
END_RCPP
}
// ip2D_eval_num
Rcpp::NumericVector ip2D_eval_num(Rcpp::XPtr<tmbutils::interpol2D<double> > ptr, Rcpp::NumericVector x, Rcpp::NumericVector y);
RcppExport SEXP _RTMB_ip2D_eval_num(SEXP ptrSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<tmbutils::interpol2D<double> > >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ip2D_eval_num(ptr, x, y));
    return rcpp_result_gen;
END_RCPP
}
// ip2D_eval_ad
ADrep ip2D_eval_ad(Rcpp::XPtr<tmbutils::interpol2D<double> > ptr, ADrep x, ADrep y);
RcppExport SEXP _RTMB_ip2D_eval_ad(SEXP ptrSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<tmbutils::interpol2D<double> > >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ip2D_eval_ad(ptr, x, y));
    return rcpp_result_gen;
END_RCPP
}
// splineptr
Rcpp::XPtr<tmbutils::splinefun<ad> > splineptr(ADrep x, ADrep y, int method);
RcppExport SEXP _RTMB_splineptr(SEXP xSEXP, SEXP ySEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(splineptr(x, y, method));
    return rcpp_result_gen;
END_RCPP
}
// splineptr_eval
ADrep splineptr_eval(Rcpp::XPtr<tmbutils::splinefun<ad> > ptr, ADrep x);
RcppExport SEXP _RTMB_splineptr_eval(SEXP ptrSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<tmbutils::splinefun<ad> > >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(splineptr_eval(ptr, x));
    return rcpp_result_gen;
END_RCPP
}
// sytrisol
Rcpp::NumericMatrix sytrisol(Rcpp::NumericMatrix L, Rcpp::NumericMatrix W);
RcppExport SEXP _RTMB_sytrisol(SEXP LSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(sytrisol(L, W));
    return rcpp_result_gen;
END_RCPP
}
// Arith2
ADrep Arith2(ADrep x, ADrep y, std::string op);
RcppExport SEXP _RTMB_Arith2(SEXP xSEXP, SEXP ySEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(Arith2(x, y, op));
    return rcpp_result_gen;
END_RCPP
}
// Math1
ADrep Math1(ADrep x, std::string op);
RcppExport SEXP _RTMB_Math1(SEXP xSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(Math1(x, op));
    return rcpp_result_gen;
END_RCPP
}
// math_atan2
ADrep math_atan2(ADrep y, ADrep x);
RcppExport SEXP _RTMB_math_atan2(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(math_atan2(y, x));
    return rcpp_result_gen;
END_RCPP
}
// Reduce1
ADrep Reduce1(ADrep x, std::string op);
RcppExport SEXP _RTMB_Reduce1(SEXP xSEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(Reduce1(x, op));
    return rcpp_result_gen;
END_RCPP
}
// matmul
ADrep matmul(ADrep x, ADrep y);
RcppExport SEXP _RTMB_matmul(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matmul(x, y));
    return rcpp_result_gen;
END_RCPP
}
// matinv
ADrep matinv(ADrep x);
RcppExport SEXP _RTMB_matinv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(matinv(x));
    return rcpp_result_gen;
END_RCPP
}
// dmvnorm0
ADrep dmvnorm0(ADrep x, ADrep s, bool give_log, SEXP keep);
RcppExport SEXP _RTMB_dmvnorm0(SEXP xSEXP, SEXP sSEXP, SEXP give_logSEXP, SEXP keepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type s(sSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm0(x, s, give_log, keep));
    return rcpp_result_gen;
END_RCPP
}
// dgmrf0
ADrep dgmrf0(ADrep x, Rcpp::RObject q, bool give_log);
RcppExport SEXP _RTMB_dgmrf0(SEXP xSEXP, SEXP qSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dgmrf0(x, q, give_log));
    return rcpp_result_gen;
END_RCPP
}
// SparseArith2
Rcpp::RObject SparseArith2(Rcpp::RObject x, Rcpp::RObject y, std::string op);
RcppExport SEXP _RTMB_SparseArith2(SEXP xSEXP, SEXP ySEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(SparseArith2(x, y, op));
    return rcpp_result_gen;
END_RCPP
}
// Dense2Sparse
Rcpp::RObject Dense2Sparse(ADrep x);
RcppExport SEXP _RTMB_Dense2Sparse(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Dense2Sparse(x));
    return rcpp_result_gen;
END_RCPP
}
// math_expm
ADrep math_expm(Rcpp::RObject x);
RcppExport SEXP _RTMB_math_expm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(math_expm(x));
    return rcpp_result_gen;
END_RCPP
}
// math_sqrtm
ADrep math_sqrtm(Rcpp::RObject x);
RcppExport SEXP _RTMB_math_sqrtm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(math_sqrtm(x));
    return rcpp_result_gen;
END_RCPP
}
// math_absm
ADrep math_absm(Rcpp::RObject x);
RcppExport SEXP _RTMB_math_absm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(math_absm(x));
    return rcpp_result_gen;
END_RCPP
}
// expATv
ADrep expATv(SEXP AT, ADrep v, ADrep N, Rcpp::List cfg);
RcppExport SEXP _RTMB_expATv(SEXP ATSEXP, SEXP vSEXP, SEXP NSEXP, SEXP cfgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type AT(ATSEXP);
    Rcpp::traits::input_parameter< ADrep >::type v(vSEXP);
    Rcpp::traits::input_parameter< ADrep >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type cfg(cfgSEXP);
    rcpp_result_gen = Rcpp::wrap(expATv(AT, v, N, cfg));
    return rcpp_result_gen;
END_RCPP
}
// SparseSolve
ADrep SparseSolve(Rcpp::RObject s, ADrep x);
RcppExport SEXP _RTMB_SparseSolve(SEXP sSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type s(sSEXP);
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(SparseSolve(s, x));
    return rcpp_result_gen;
END_RCPP
}
// fft_complex
ADrep fft_complex(ADrep x, std::vector<size_t> dim, bool inverse);
RcppExport SEXP _RTMB_fft_complex(SEXP xSEXP, SEXP dimSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<size_t> >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(fft_complex(x, dim, inverse));
    return rcpp_result_gen;
END_RCPP
}
// TapedEval
ADrep TapedEval(Rcpp::Function F, ADrep i);
RcppExport SEXP _RTMB_TapedEval(SEXP FSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type F(FSEXP);
    Rcpp::traits::input_parameter< ADrep >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(TapedEval(F, i));
    return rcpp_result_gen;
END_RCPP
}
// LowRankTag
ADrep LowRankTag(ADrep x);
RcppExport SEXP _RTMB_LowRankTag(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(LowRankTag(x));
    return rcpp_result_gen;
END_RCPP
}
// Term
SEXP Term(const SEXP x_);
RcppExport SEXP _RTMB_Term(SEXP x_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type x_(x_SEXP);
    rcpp_result_gen = Rcpp::wrap(Term(x_));
    return rcpp_result_gen;
END_RCPP
}
// TermsZero
void TermsZero(Rcpp::XPtr<TMBad::ADFun<> > adf, bool setZero);
RcppExport SEXP _RTMB_TermsZero(SEXP adfSEXP, SEXP setZeroSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< bool >::type setZero(setZeroSEXP);
    TermsZero(adf, setZero);
    return R_NilValue;
END_RCPP
}
// InvPersistent
void InvPersistent(Rcpp::XPtr<TMBad::ADFun<> > adf, bool setPers);
RcppExport SEXP _RTMB_InvPersistent(SEXP adfSEXP, SEXP setPersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<TMBad::ADFun<> > >::type adf(adfSEXP);
    Rcpp::traits::input_parameter< bool >::type setPers(setPersSEXP);
    InvPersistent(adf, setPers);
    return R_NilValue;
END_RCPP
}
// subset_ad
ADrep subset_ad(ADrep x, ADrep i);
RcppExport SEXP _RTMB_subset_ad(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_ad(x, i));
    return rcpp_result_gen;
END_RCPP
}
// findInterval_ad
ADrep findInterval_ad(ADrep x, ADrep i);
RcppExport SEXP _RTMB_findInterval_ad(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    Rcpp::traits::input_parameter< ADrep >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(findInterval_ad(x, i));
    return rcpp_result_gen;
END_RCPP
}
// order_ad
ADrep order_ad(ADrep x);
RcppExport SEXP _RTMB_order_ad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(order_ad(x));
    return rcpp_result_gen;
END_RCPP
}
// sort_ad
ADrep sort_ad(ADrep x);
RcppExport SEXP _RTMB_sort_ad(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ADrep >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_ad(x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_mod_adfun();

static const R_CallMethodDef CallEntries[] = {
    TMB_CALLDEFS,
    {"_RTMB_valid", (DL_FUNC) &_RTMB_valid, 1},
    {"_RTMB_ad_context", (DL_FUNC) &_RTMB_ad_context, 0},
    {"_RTMB_as_advector", (DL_FUNC) &_RTMB_as_advector, 1},
    {"_RTMB_SpJacFun", (DL_FUNC) &_RTMB_SpJacFun, 1},
    {"_RTMB_RangeProj", (DL_FUNC) &_RTMB_RangeProj, 2},
    {"_RTMB_find_op_by_name", (DL_FUNC) &_RTMB_find_op_by_name, 2},
    {"_RTMB_op2var", (DL_FUNC) &_RTMB_op2var, 2},
    {"_RTMB_findIndex", (DL_FUNC) &_RTMB_findIndex, 2},
    {"_RTMB_setinvIndex", (DL_FUNC) &_RTMB_setinvIndex, 2},
    {"_RTMB_getinvIndex", (DL_FUNC) &_RTMB_getinvIndex, 1},
    {"_RTMB_get_graph", (DL_FUNC) &_RTMB_get_graph, 1},
    {"_RTMB_get_df", (DL_FUNC) &_RTMB_get_df, 1},
    {"_RTMB_timer", (DL_FUNC) &_RTMB_timer, 2},
    {"_RTMB_get_node", (DL_FUNC) &_RTMB_get_node, 2},
    {"_RTMB_set_tape_config", (DL_FUNC) &_RTMB_set_tape_config, 6},
    {"_RTMB_compare_allow", (DL_FUNC) &_RTMB_compare_allow, 0},
    {"_RTMB_advec", (DL_FUNC) &_RTMB_advec, 1},
    {"_RTMB_dependent", (DL_FUNC) &_RTMB_dependent, 1},
    {"_RTMB_independent", (DL_FUNC) &_RTMB_independent, 1},
    {"_RTMB_getValues", (DL_FUNC) &_RTMB_getValues, 1},
    {"_RTMB_getVariables", (DL_FUNC) &_RTMB_getVariables, 1},
    {"_RTMB_dbgprint", (DL_FUNC) &_RTMB_dbgprint, 1},
    {"_RTMB_ptr_getx", (DL_FUNC) &_RTMB_ptr_getx, 1},
    {"_RTMB_ptr_gety", (DL_FUNC) &_RTMB_ptr_gety, 1},
    {"_RTMB_distr_dexp", (DL_FUNC) &_RTMB_distr_dexp, 3},
    {"_RTMB_distr_dweibull", (DL_FUNC) &_RTMB_distr_dweibull, 4},
    {"_RTMB_distr_dbinom", (DL_FUNC) &_RTMB_distr_dbinom, 4},
    {"_RTMB_distr_dbinom_robust", (DL_FUNC) &_RTMB_distr_dbinom_robust, 4},
    {"_RTMB_distr_dbeta", (DL_FUNC) &_RTMB_distr_dbeta, 4},
    {"_RTMB_distr_df", (DL_FUNC) &_RTMB_distr_df, 4},
    {"_RTMB_distr_dlogis", (DL_FUNC) &_RTMB_distr_dlogis, 4},
    {"_RTMB_distr_dsn", (DL_FUNC) &_RTMB_distr_dsn, 3},
    {"_RTMB_distr_dt", (DL_FUNC) &_RTMB_distr_dt, 3},
    {"_RTMB_distr_dSHASHo", (DL_FUNC) &_RTMB_distr_dSHASHo, 6},
    {"_RTMB_distr_dtweedie", (DL_FUNC) &_RTMB_distr_dtweedie, 5},
    {"_RTMB_distr_dnbinom", (DL_FUNC) &_RTMB_distr_dnbinom, 4},
    {"_RTMB_distr_dnbinom_robust", (DL_FUNC) &_RTMB_distr_dnbinom_robust, 4},
    {"_RTMB_distr_dnbinom2", (DL_FUNC) &_RTMB_distr_dnbinom2, 4},
    {"_RTMB_distr_dpois", (DL_FUNC) &_RTMB_distr_dpois, 3},
    {"_RTMB_distr_dgamma", (DL_FUNC) &_RTMB_distr_dgamma, 4},
    {"_RTMB_distr_dlgamma", (DL_FUNC) &_RTMB_distr_dlgamma, 4},
    {"_RTMB_distr_pnorm", (DL_FUNC) &_RTMB_distr_pnorm, 3},
    {"_RTMB_distr_pgamma", (DL_FUNC) &_RTMB_distr_pgamma, 3},
    {"_RTMB_distr_ppois", (DL_FUNC) &_RTMB_distr_ppois, 2},
    {"_RTMB_distr_pexp", (DL_FUNC) &_RTMB_distr_pexp, 2},
    {"_RTMB_distr_pweibull", (DL_FUNC) &_RTMB_distr_pweibull, 3},
    {"_RTMB_distr_pbeta", (DL_FUNC) &_RTMB_distr_pbeta, 3},
    {"_RTMB_distr_qnorm", (DL_FUNC) &_RTMB_distr_qnorm, 3},
    {"_RTMB_distr_qgamma", (DL_FUNC) &_RTMB_distr_qgamma, 3},
    {"_RTMB_distr_qexp", (DL_FUNC) &_RTMB_distr_qexp, 2},
    {"_RTMB_distr_qweibull", (DL_FUNC) &_RTMB_distr_qweibull, 3},
    {"_RTMB_distr_qbeta", (DL_FUNC) &_RTMB_distr_qbeta, 3},
    {"_RTMB_distr_besselK", (DL_FUNC) &_RTMB_distr_besselK, 2},
    {"_RTMB_distr_besselI", (DL_FUNC) &_RTMB_distr_besselI, 2},
    {"_RTMB_distr_besselJ", (DL_FUNC) &_RTMB_distr_besselJ, 2},
    {"_RTMB_distr_besselY", (DL_FUNC) &_RTMB_distr_besselY, 2},
    {"_RTMB_distr_compois_calc_logZ", (DL_FUNC) &_RTMB_distr_compois_calc_logZ, 2},
    {"_RTMB_distr_compois_calc_loglambda", (DL_FUNC) &_RTMB_distr_compois_calc_loglambda, 2},
    {"_RTMB_distr_logspace_add", (DL_FUNC) &_RTMB_distr_logspace_add, 2},
    {"_RTMB_distr_logspace_sub", (DL_FUNC) &_RTMB_distr_logspace_sub, 2},
    {"_RTMB_distr_rcompois", (DL_FUNC) &_RTMB_distr_rcompois, 2},
    {"_RTMB_ip2D", (DL_FUNC) &_RTMB_ip2D, 4},
    {"_RTMB_ip2D_eval_num", (DL_FUNC) &_RTMB_ip2D_eval_num, 3},
    {"_RTMB_ip2D_eval_ad", (DL_FUNC) &_RTMB_ip2D_eval_ad, 3},
    {"_RTMB_splineptr", (DL_FUNC) &_RTMB_splineptr, 3},
    {"_RTMB_splineptr_eval", (DL_FUNC) &_RTMB_splineptr_eval, 2},
    {"_RTMB_sytrisol", (DL_FUNC) &_RTMB_sytrisol, 2},
    {"_RTMB_Arith2", (DL_FUNC) &_RTMB_Arith2, 3},
    {"_RTMB_Math1", (DL_FUNC) &_RTMB_Math1, 2},
    {"_RTMB_math_atan2", (DL_FUNC) &_RTMB_math_atan2, 2},
    {"_RTMB_Reduce1", (DL_FUNC) &_RTMB_Reduce1, 2},
    {"_RTMB_matmul", (DL_FUNC) &_RTMB_matmul, 2},
    {"_RTMB_matinv", (DL_FUNC) &_RTMB_matinv, 1},
    {"_RTMB_dmvnorm0", (DL_FUNC) &_RTMB_dmvnorm0, 4},
    {"_RTMB_dgmrf0", (DL_FUNC) &_RTMB_dgmrf0, 3},
    {"_RTMB_SparseArith2", (DL_FUNC) &_RTMB_SparseArith2, 3},
    {"_RTMB_Dense2Sparse", (DL_FUNC) &_RTMB_Dense2Sparse, 1},
    {"_RTMB_math_expm", (DL_FUNC) &_RTMB_math_expm, 1},
    {"_RTMB_math_sqrtm", (DL_FUNC) &_RTMB_math_sqrtm, 1},
    {"_RTMB_math_absm", (DL_FUNC) &_RTMB_math_absm, 1},
    {"_RTMB_expATv", (DL_FUNC) &_RTMB_expATv, 4},
    {"_RTMB_SparseSolve", (DL_FUNC) &_RTMB_SparseSolve, 2},
    {"_RTMB_fft_complex", (DL_FUNC) &_RTMB_fft_complex, 3},
    {"_RTMB_TapedEval", (DL_FUNC) &_RTMB_TapedEval, 2},
    {"_RTMB_LowRankTag", (DL_FUNC) &_RTMB_LowRankTag, 1},
    {"_RTMB_Term", (DL_FUNC) &_RTMB_Term, 1},
    {"_RTMB_TermsZero", (DL_FUNC) &_RTMB_TermsZero, 2},
    {"_RTMB_InvPersistent", (DL_FUNC) &_RTMB_InvPersistent, 2},
    {"_RTMB_subset_ad", (DL_FUNC) &_RTMB_subset_ad, 2},
    {"_RTMB_findInterval_ad", (DL_FUNC) &_RTMB_findInterval_ad, 2},
    {"_RTMB_order_ad", (DL_FUNC) &_RTMB_order_ad, 1},
    {"_RTMB_sort_ad", (DL_FUNC) &_RTMB_sort_ad, 1},
    {"_rcpp_module_boot_mod_adfun", (DL_FUNC) &_rcpp_module_boot_mod_adfun, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RTMB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    RTMB_CCALLABLES;
}
